#!/usr/bin/env python3
import yaml
import re
import sys
import json

def extract_flags_and_pattern(raw_regex: str):
    flags = "g"
    pat = raw_regex

    if "(?i)" in pat or "(?i:" in pat:
        flags += "i"
    
    pat = re.sub(r"\(\?i\)", "", pat)
    pat = re.sub(r"\(\?-i\)", "", pat)
    pat = re.sub(r"\(\?i:(.*?)\)", r"\1", pat)
    pat = re.sub(r"\(\?-i:(.*?)\)", r"\1", pat)

    return pat, flags

def js_escape_string(s: str) -> str:
    s = s.replace("\\", "\\\\")
    s = s.replace('"', '\\"')
    return s

def main():
    if len(sys.argv) != 3:
        print("Usage: python yaml_to_js.py patterns.yaml patterns.js")
        sys.exit(1)

    yaml_path = sys.argv[1]
    js_path = sys.argv[2]

    with open(yaml_path, "r") as f:
        data = yaml.safe_load(f)

    if "patterns" not in data or not isinstance(data["patterns"], list):
        print(f"Error: {yaml_path} does not contain a top-level 'patterns' list.")
        sys.exit(1)

    entries = data["patterns"]
    js_entries = []
    seen_names = set()  # Track duplicates

    for entry in entries:
        pat_def = entry.get("pattern")
        if not pat_def:
            continue

        name = pat_def.get("name")
        raw_regex = pat_def.get("regex", "")
        confidence = pat_def.get("confidence", "")

        if confidence != "high" or name in seen_names:
            continue
        
        seen_names.add(name)

        js_pattern_text, js_flags = extract_flags_and_pattern(raw_regex)
        js_pattern_escaped = js_escape_string(js_pattern_text)

        js_entries.append({
            "id": name,
            "pattern": js_pattern_escaped,
            "flags": js_flags,
            "confidence": confidence
        })

    with open(js_path, "w") as out:
        out.write("// This file was auto-generated by yaml_to_js.py\n")
        out.write("window.SECRET_PATTERNS = [\n")

        for e in js_entries:
            line = (
                "  {\n"
                f"    id: {json.dumps(e['id'])},\n"
                f"    regex: new RegExp(\"{e['pattern']}\", \"{e['flags']}\"),\n"
                f"    confidence: {json.dumps(e['confidence'])}\n"
                "  },\n"
            )
            out.write(line)

        out.write("];\n")

    print(f"Wrote {len(js_entries)} unique high-confidence patterns to {js_path}.")

if __name__ == "__main__":
    main()